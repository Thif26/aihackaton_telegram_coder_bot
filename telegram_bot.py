
import os
import logging
import tempfile
import json
import csv
from datetime import datetime
from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç
try:
    from utils.excel_parser import ExcelParser
    from utils.ai_client import AIClient
    from utils.code_renderer import CodeRenderer
except ImportError:
    # –î–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
    import sys
    sys.path.append(os.path.dirname(os.path.abspath(__file__)))
    from utils.excel_parser import ExcelParser
    from utils.ai_client import AIClient
    from utils.code_renderer import CodeRenderer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self, token: str):
        self.token = token
        self.application = Application.builder().token(token).build()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        self.setup_directories()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Ç–∏–ª–∏—Ç
        try:
            self.ai_client = AIClient()
            self.excel_parser = ExcelParser()
            self.code_renderer = CodeRenderer()
            logger.info("–£—Ç–∏–ª–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É—Ç–∏–ª–∏—Ç: {e}")
            raise
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_data: Dict[int, Dict] = {}
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.setup_handlers()
    
    def setup_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
        self.base_save_dir = "generated_codes"
        self.users_dir = os.path.join(self.base_save_dir, "users")
        self.logs_dir = os.path.join(self.base_save_dir, "logs")
        
        os.makedirs(self.users_dir, exist_ok=True)
        os.makedirs(self.logs_dir, exist_ok=True)
        
        logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã: {self.base_save_dir}")
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫ - –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ü–ï–†–í–´–ú!
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("clear", self.clear_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.Document.ALL, self.handle_document))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    def get_user_data(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_data:
            self.user_data[user_id] = {
                'excel_tasks': [],
                'text_tasks': [],
                'generated_codes': {},
                'html_contents': {},
                'current_task': None,
                'state': 'idle',
                'last_message_id': None,
                'task_documents': {},
                'keyboard_message_id': None,
                'last_keyboard_text': None,
                'last_keyboard_markup': None,
                'previous_messages': []  # –•—Ä–∞–Ω–∏–º ID –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            }
        return self.user_data[user_id]
    
    async def cleanup_previous_messages(self, context: ContextTypes.DEFAULT_TYPE, user_id: int, keep_keyboard: bool = False):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞"""
        user_data = self.get_user_data(user_id)
        
        messages_to_delete = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–æ–º–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å)
        for msg_id in user_data.get('previous_messages', []):
            if keep_keyboard and msg_id == user_data.get('keyboard_message_id'):
                continue
            messages_to_delete.append(msg_id)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg_id in messages_to_delete:
            try:
                await context.bot.delete_message(chat_id=user_id, message_id=msg_id)
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if keep_keyboard and user_data.get('keyboard_message_id'):
            user_data['previous_messages'] = [user_data['keyboard_message_id']]
        else:
            user_data['previous_messages'] = []
            user_data['keyboard_message_id'] = None
    
    def save_user_info(self, user_id: int, username: str, first_name: str, last_name: str = ""):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        user_file = os.path.join(self.users_dir, f"user_{user_id}.json")
        user_info = {
            'user_id': user_id,
            'username': username,
            'first_name': first_name,
            'last_name': last_name,
            'first_seen': datetime.now().isoformat(),
            'last_activity': datetime.now().isoformat()
        }
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ last_activity
        if os.path.exists(user_file):
            with open(user_file, 'r', encoding='utf-8') as f:
                existing_data = json.load(f)
                user_info['first_seen'] = existing_data.get('first_seen', user_info['first_seen'])
        
        with open(user_file, 'w', encoding='utf-8') as f:
            json.dump(user_info, f, ensure_ascii=False, indent=2)
    
    def log_activity(self, user_id: int, action: str, task_id: str = "", task_description: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        log_file = os.path.join(self.logs_dir, f"activity_{datetime.now().strftime('%Y-%m-%d')}.csv")
        file_exists = os.path.isfile(log_file)
        
        with open(log_file, 'a', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            if not file_exists:
                writer.writerow(['timestamp', 'user_id', 'action', 'task_id', 'task_description'])
            
            writer.writerow([
                datetime.now().isoformat(),
                user_id,
                action,
                task_id,
                task_description[:100]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
            ])
    
    def save_generated_code(self, user_id: int, task: Dict, html_content: str, generated_code: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –≤ —Ñ–∞–π–ª"""
        user_codes_dir = os.path.join(self.users_dir, f"user_{user_id}", "codes")
        os.makedirs(user_codes_dir, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Ñ–∞–π–ª
        html_filename = f"task_{task['id']}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
        html_filepath = os.path.join(user_codes_dir, html_filename)
        
        with open(html_filepath, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = {
            'task_id': task['id'],
            'task_description': task.get('description', ''),
            'task_summary': task.get('summary', ''),
            'task_type': task.get('type', 'unknown'),
            'generated_at': datetime.now().isoformat(),
            'html_file': html_filename,
            'user_id': user_id
        }
        
        metadata_filename = f"task_{task['id']}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        metadata_filepath = os.path.join(user_codes_dir, metadata_filename)
        
        with open(metadata_filepath, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, ensure_ascii=False, indent=2)
        
        logger.info(f"–ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∑–∞–¥–∞—á–∞ {task['id']}")
        return html_filepath, metadata_filepath
    
    async def update_keyboard_message(self, context: ContextTypes.DEFAULT_TYPE, user_id: int, text: str = None, reply_markup=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
        user_data = self.get_user_data(user_id)
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
        if text is None:
            text = "üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        current_text = user_data.get('last_keyboard_text')
        current_markup = user_data.get('last_keyboard_markup')
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Ä–∞–∑–º–µ—Ç–∫—É
        text_changed = current_text != text
        markup_changed = str(current_markup) != str(reply_markup) if current_markup else True
        
        # –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        if user_data.get('keyboard_message_id') and (text_changed or markup_changed):
            try:
                await context.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=user_data['keyboard_message_id'],
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                user_data['last_keyboard_text'] = text
                user_data['last_keyboard_markup'] = reply_markup
                return
            except Exception as e:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "Message is not modified"
                if "Message is not modified" in str(e):
                    logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                    return
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
        message = await context.bot.send_message(
            chat_id=user_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_data['keyboard_message_id'] = message.message_id
        user_data['last_keyboard_text'] = text
        user_data['last_keyboard_markup'] = reply_markup
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        user_data['previous_messages'].append(message.message_id)
    
    async def send_temporary_message(self, context: ContextTypes.DEFAULT_TYPE, user_id: int, text: str, parse_mode=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        message = await context.bot.send_message(
            chat_id=user_id,
            text=text,
            parse_mode=parse_mode
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        user_data = self.get_user_data(user_id)
        user_data['previous_messages'].append(message.message_id)
        
        return message
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user = update.effective_user
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await self.cleanup_previous_messages(context, user_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        self.save_user_info(
            user_id=user_id,
            username=user.username or "",
            first_name=user.first_name or "",
            last_name=user.last_name or ""
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        self.log_activity(user_id, "start_bot")
        
        user_data = self.get_user_data(user_id)
        
        welcome_text = """
üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Code Generator Bot!**

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä—É—Ç—ã–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:

üéØ **–ì–æ—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ üê± –°–∞–π—Ç-–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è IT-–∫–æ—Ç–∞
‚Ä¢ üó∫Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–∫—Ä–æ–≤–∏—â  
‚Ä¢ üéÆ –ò–≥—Ä–∞: –£–±–µ–≥–∏ –æ—Ç —Ç–∏–º–ª–∏–¥–∞"
‚Ä¢ üòÇ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–µ–º–æ–≤ –Ω–∞ –¥–µ–π–ª–∏–∫

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –Ω–∏–∂–µ –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –∏–¥–µ–µ
2. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π HTML/CSS/JS –∫–æ–¥
3. –°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ!

**–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä:**
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await self.send_temporary_message(
            context, user_id, welcome_text, 
            parse_mode='Markdown'
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
        await self.update_examples_keyboard(context, user_id)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    async def update_examples_keyboard(self, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
        keyboard = [
            [InlineKeyboardButton("üê± –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∫–æ—Ç–∞", callback_data="example_cat")],
            [InlineKeyboardButton("üó∫Ô∏è –ö–∞—Ä—Ç–∞ —Å–æ–∫—Ä–æ–≤–∏—â", callback_data="example_treasure")],
            [InlineKeyboardButton("üéÆ –£–±–µ–≥–∏ –æ—Ç –¥–∏–Ω–æ–∑–∞–≤—Ä–∞", callback_data="example_dinosaur")],
            [InlineKeyboardButton("üòÇ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–µ–º–æ–≤", callback_data="example_memes")],
            [InlineKeyboardButton("üìù –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="text_input")],
            [InlineKeyboardButton("üìñ –°–ø—Ä–∞–≤–∫–∞", callback_data="help")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.update_keyboard_message(
            context, user_id,
            "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    
    async def update_main_keyboard(self, context: ContextTypes.DEFAULT_TYPE, user_id: int, task: Dict = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        user_data = self.get_user_data(user_id)
        
        keyboard = []
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–π
        if task and task['id'] in user_data['generated_codes']:
            keyboard.append([InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", callback_data="regenerate")])
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∑–∞–¥–∞—á–∞–º
        switch_buttons = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
        for i, excel_task in enumerate(user_data['excel_tasks']):
            if excel_task['id'] in user_data['generated_codes']:
                switch_buttons.append(
                    InlineKeyboardButton(
                        f"üìä {excel_task['summary'][:15]}...", 
                        callback_data=f"switch_task_excel_{i}"
                    )
                )
        
        for i, text_task in enumerate(user_data['text_tasks']):
            if text_task['id'] in user_data['generated_codes']:
                switch_buttons.append(
                    InlineKeyboardButton(
                        f"üìù {text_task['summary'][:15]}...", 
                        callback_data=f"switch_task_text_{i}"
                    )
                )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 2 –≤ —Ä—è–¥)
        if switch_buttons:
            keyboard.append([InlineKeyboardButton("üîÄ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –∑–∞–¥–∞—á—É:", callback_data="no_action")])
            for i in range(0, len(switch_buttons), 2):
                row = switch_buttons[i:i+2]
                keyboard.append(row)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.extend([
            [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏", callback_data="task_list")],
            [
                InlineKeyboardButton("üìù –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="new_task"),
                InlineKeyboardButton("üìñ –°–ø—Ä–∞–≤–∫–∞", callback_data="help")
            ],
            [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear")]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –¢–µ–∫—Å—Ç –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if task:
            text = f"üìã **–¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞:** {task['summary']}\n\nüí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        else:
            total_tasks = len(user_data['excel_tasks']) + len(user_data['text_tasks'])
            generated_tasks = len(user_data['generated_codes'])
            text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** {generated_tasks}/{total_tasks} –∑–∞–¥–∞—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ\n\nüí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        await self.update_keyboard_message(
            context, user_id,
            text,
            reply_markup=reply_markup
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        user_id = update.effective_user.id
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await self.cleanup_previous_messages(context, user_id, keep_keyboard=True)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        self.log_activity(user_id, "help_command")
        
        help_text = """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–§–æ—Ä–º–∞—Ç Excel —Ñ–∞–π–ª–∞:**
–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏:
- "–•–æ—á—É" - –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
- "–ß—Ç–æ–±—ã" - —Ü–µ–ª—å/—Ä–µ–∑—É–ª—å—Ç–∞—Ç  
- "–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏–µ–º–∫–∏" - —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
- "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏" - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è

**–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã:**
–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å. –ü—Ä–∏–º–µ—Ä:
"–°–æ–∑–¥–∞–π –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ–º —Ñ–æ–Ω–æ–º –∏ –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–æ—è–≤–ª–µ–Ω–∏—è"

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏:**
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
- –ö–∞–∂–¥–∞—è –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫
- –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ª—é–±–æ–π –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–µ

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏–ª–∏ Excel —Ñ–∞–π–ª!
        """
        
        await self.send_temporary_message(
            context, user_id, help_text, 
            parse_mode='Markdown'
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        user_data = self.get_user_data(user_id)
        await self.update_main_keyboard(context, user_id, user_data.get('current_task'))
    
    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear"""
        user_id = update.effective_user.id
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await self.cleanup_previous_messages(context, user_id)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        self.log_activity(user_id, "clear_history")
        
        self.user_data[user_id] = {
            'excel_tasks': [],
            'text_tasks': [],
            'generated_codes': {},
            'html_contents': {},
            'current_task': None,
            'state': 'idle',
            'last_message_id': None,
            'task_documents': {},
            'keyboard_message_id': None,
            'last_keyboard_text': None,
            'last_keyboard_markup': None,
            'previous_messages': []
        }
        
        await self.send_temporary_message(
            context, user_id, 
            "‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á –æ—á–∏—â–µ–Ω–∞!"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
        await self.update_examples_keyboard(context, user_id)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—á–∏—Å—Ç–∏–ª –∏—Å—Ç–æ—Ä–∏—é")
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–æ–≤"""
        user_id = update.effective_user.id
        user_data = self.get_user_data(user_id)
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await self.cleanup_previous_messages(context, user_id, keep_keyboard=True)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        self.log_activity(user_id, "upload_excel")
        
        document = update.message.document
        file_extension = document.file_name.split('.')[-1].lower()
        
        if file_extension != 'xlsx':
            await self.send_temporary_message(
                context, user_id, 
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx"
            )
            return
        
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        file = await context.bot.get_file(document.file_id)
        file_path = f"temp_{user_id}_{document.file_name}"
        await file.download_to_drive(file_path)
        
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ Excel
            with open(file_path, 'rb') as f:
                tasks = self.excel_parser.extract_tasks_from_xlsx(f)
            
            if tasks:
                user_data['excel_tasks'] = tasks
                user_data['state'] = 'excel_loaded'
                
                await self.send_temporary_message(
                    context, user_id,
                    f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞:"
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á
                keyboard = []
                for i, task in enumerate(tasks):
                    keyboard.append([
                        InlineKeyboardButton(
                            f"{task['id']}. {task['summary']}", 
                            callback_data=f"excel_task_{i}"
                        )
                    ])
                
                keyboard.append([InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥", callback_data="text_input")])
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await self.update_keyboard_message(
                    context, user_id,
                    "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –∏–∑ Excel:",
                    reply_markup=reply_markup
                )
                
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≥—Ä—É–∑–∏–ª Excel —Å {len(tasks)} –∑–∞–¥–∞—á–∞–º–∏")
            else:
                await self.send_temporary_message(
                    context, user_id,
                    "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª–µ"
                )
                
        except Exception as e:
            logger.error(f"Error processing Excel file: {e}")
            await self.send_temporary_message(
                context, user_id,
                f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}"
            )
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(file_path):
                os.remove(file_path)
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ù–ï –£–î–ê–õ–Ø–ï–ú –ö–õ–ê–í–ò–ê–¢–£–†–£"""
        user_id = update.effective_user.id
        user_data = self.get_user_data(user_id)
        text = update.message.text
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –°–û–•–†–ê–ù–Ø–ï–ú –ö–õ–ê–í–ò–ê–¢–£–†–£
        await self.cleanup_previous_messages(context, user_id, keep_keyboard=True)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        self.log_activity(user_id, "text_input", task_description=text[:50])
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏ –∏–∑ Excel
        if user_data['state'] == 'excel_loaded' and text.isdigit():
            task_index = int(text) - 1
            if 0 <= task_index < len(user_data['excel_tasks']):
                task = user_data['excel_tasks'][task_index]
                await self.generate_and_send_code(update, context, task)
                return
        
        # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        task_id = f"text_{len(user_data['text_tasks']) + 1}"
        task = {
            'id': task_id,
            'description': text,
            'summary': text[:40] + "..." if len(text) > 40 else text,
            'type': 'text'
        }
        
        user_data['text_tasks'].append(task)
        await self.generate_and_send_code(update, context, task)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {text[:50]}...")
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        user_data = self.get_user_data(user_id)
        callback_data = query.data
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await self.cleanup_previous_messages(context, user_id, keep_keyboard=True)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        self.log_activity(user_id, f"callback_{callback_data}")
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback_data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        try:
            if callback_data.startswith('excel_task_'):
                # –í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏ –∏–∑ Excel
                task_index = int(callback_data.split('_')[2])
                if task_index < len(user_data['excel_tasks']):
                    task = user_data['excel_tasks'][task_index]
                    await self.generate_and_send_code(update, context, task)
            
            elif callback_data == 'text_input':
                # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –≤–≤–æ–¥—É - –ù–ï –£–î–ê–õ–Ø–ï–ú –ö–õ–ê–í–ò–ê–¢–£–†–£
                user_data['state'] = 'idle'
                await self.send_temporary_message(
                    context, user_id,
                    "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:"
                )
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
                await self.update_main_keyboard(context, user_id)
            
            elif callback_data == 'regenerate':
                # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
                if user_data['current_task']:
                    await self.generate_and_send_code(update, context, user_data['current_task'], regenerate=True)
                else:
                    await self.send_temporary_message(
                        context, user_id,
                        "‚ùå –ù–µ—Ç —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
                    )
            
            elif callback_data.startswith('switch_task_'):
                # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥—É—é –∑–∞–¥–∞—á—É
                parts = callback_data.split('_')
                if len(parts) >= 4:
                    task_type = parts[2]
                    task_index = int(parts[3])
                    
                    if task_type == 'excel' and task_index < len(user_data['excel_tasks']):
                        task = user_data['excel_tasks'][task_index]
                    elif task_type == 'text' and task_index < len(user_data['text_tasks']):
                        task = user_data['text_tasks'][task_index]
                    else:
                        await self.send_temporary_message(
                            context, user_id,
                            "‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                        )
                        return
                    
                    await self.switch_to_task(update, context, task)
            
            elif callback_data == 'task_list':
                # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
                await self.show_task_list(user_id, context)
            
            elif callback_data == 'help':
                # –ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏
                await self.send_help_message(user_id, context)
            
            elif callback_data == 'clear':
                # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
                await self.clear_user_data(user_id, context)
            
            elif callback_data == 'new_task':
                # –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ - –ù–ï –£–î–ê–õ–Ø–ï–ú –ö–õ–ê–í–ò–ê–¢–£–†–£
                user_data['state'] = 'idle'
                await self.send_temporary_message(
                    context, user_id,
                    "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:"
                )
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
                await self.update_main_keyboard(context, user_id)
            
            elif callback_data == 'back_to_main':
                # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
                await self.update_main_keyboard(context, user_id)
            
            elif callback_data == 'no_action':
                # –ü—É—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
                pass
            
            elif callback_data.startswith('example_'):
                example_type = callback_data.split('_')[1]
                examples = {
                    'cat': "–°–æ–∑–¥–∞–π –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ —Å–∞–π—Ç-–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è –∫–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç —Ä–∞–±–æ—Ç—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º. –í–∫–ª—é—á–∏ –∞–Ω–∏–º–∞—Ü–∏–∏, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ —á—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞.",
                    'treasure': "–°–æ–∑–¥–∞–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É —Å–æ–∫—Ä–æ–≤–∏—â —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∫–ª–∞–¥–∞, –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–º–ø–∞—Å–æ–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–∞.",
                    'dinosaur': "–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç—É—é –∏–≥—Ä—É '–£–±–µ–≥–∏ –æ—Ç –¥–∏–Ω–æ–∑–∞–≤—Ä–∞' —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º, –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è–º–∏ –∏ —Å—á–µ—Ç—á–∏–∫–æ–º –æ—á–∫–æ–≤.",
                    'memes': "–°–æ–∑–¥–∞–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–µ–º–æ–≤ —Å –¥–≤–∏–∂—É—â–∏–º–∏—Å—è —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."
                }
                
                if example_type in examples:
                    task_id = f"example_{len(user_data['text_tasks']) + 1}"
                    task = {
                        'id': task_id,
                        'description': examples[example_type],
                        'summary': f"–ü—Ä–∏–º–µ—Ä: {example_type}",
                        'type': 'example'
                    }
                    
                    user_data['text_tasks'].append(task)
                    await self.generate_and_send_code(update, context, task)
                    
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {callback_data}")
                await self.send_temporary_message(
                    context, user_id,
                    "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            await self.send_temporary_message(
                context, user_id,
                "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"
            )
    
    async def show_task_list(self, user_id: int, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
        user_data = self.get_user_data(user_id)
        
        if not user_data['excel_tasks'] and not user_data['text_tasks']:
            await self.send_temporary_message(
                context, user_id,
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ Excel —Ñ–∞–π–ª."
            )
            return
        
        text = "üìã **–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á:**\n\n"
        
        # –ó–∞–¥–∞—á–∏ –∏–∑ Excel
        if user_data['excel_tasks']:
            text += "üìä **–ó–∞–¥–∞—á–∏ –∏–∑ Excel:**\n"
            for i, task in enumerate(user_data['excel_tasks']):
                status = "‚úÖ" if task['id'] in user_data['generated_codes'] else "‚è≥"
                text += f"{status} {task['id']}. {task['summary']}\n"
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        if user_data['text_tasks']:
            text += "\nüìù **–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏:**\n"
            for i, task in enumerate(user_data['text_tasks']):
                status = "‚úÖ" if task['id'] in user_data['generated_codes'] else "‚è≥"
                text += f"{status} {task['summary']}\n"
        
        await self.send_temporary_message(
            context, user_id,
            text,
            parse_mode='Markdown'
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await self.update_main_keyboard(context, user_id, user_data.get('current_task'))
    
    async def send_help_message(self, user_id: int, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π"""
        help_text = """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–§–æ—Ä–º–∞—Ç Excel —Ñ–∞–π–ª–∞:**
–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏:
- "–•–æ—á—É" - –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
- "–ß—Ç–æ–±—ã" - —Ü–µ–ª—å/—Ä–µ–∑—É–ª—å—Ç–∞—Ç  
- "–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏–µ–º–∫–∏" - —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
- "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏" - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ notes

**–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã:**
–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å.

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
- üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
- üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –º–µ–∂–¥—É –Ω–∏–º–∏
- üìù –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ - –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
- üìñ –°–ø—Ä–∞–≤–∫–∞ - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
- üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å - —É–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–¥–∞—á
        """
        await self.send_temporary_message(
            context, user_id,
            help_text,
            parse_mode='Markdown'
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        user_data = self.get_user_data(user_id)
        await self.update_main_keyboard(context, user_id, user_data.get('current_task'))
    
    async def clear_user_data(self, user_id: int, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.user_data[user_id] = {
            'excel_tasks': [],
            'text_tasks': [],
            'generated_codes': {},
            'html_contents': {},
            'current_task': None,
            'state': 'idle',
            'last_message_id': None,
            'task_documents': {},
            'keyboard_message_id': None,
            'last_keyboard_text': None,
            'last_keyboard_markup': None,
            'previous_messages': []
        }
        await self.send_temporary_message(
            context, user_id,
            "‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á –æ—á–∏—â–µ–Ω–∞!"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
        await self.update_examples_keyboard(context, user_id)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—á–∏—Å—Ç–∏–ª –∏—Å—Ç–æ—Ä–∏—é")
    
    async def generate_and_send_code(self, update: Update, context: ContextTypes.DEFAULT_TYPE, task: Dict, regenerate: bool = False):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞"""
        user_id = update.effective_user.id if update.message else update.callback_query.from_user.id
        user_data = self.get_user_data(user_id)
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await self.cleanup_previous_messages(context, user_id, keep_keyboard=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        user = update.effective_user if update.message else update.callback_query.from_user
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        action = "regenerate_code" if regenerate else "generate_code"
        self.log_activity(user_id, action, task['id'], task.get('description', ''))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∏ –ª–∏ —É–∂–µ –∫–æ–¥ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
        if not regenerate and task['id'] in user_data['generated_codes']:
            await self.switch_to_task(update, context, task)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        message = await context.bot.send_message(
            chat_id=user_id,
            text=f"üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è: {task['summary']}..."
        )
        user_data['previous_messages'].append(message.message_id)
        
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
            generated_code = self.ai_client.generate_code(task['description'])
            
            if generated_code:
                html_content = self.code_renderer.prepare_html(generated_code)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ —Ñ–∞–π–ª—ã
                html_filepath, metadata_filepath = self.save_generated_code(
                    user_id, task, html_content, generated_code
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –ø–∞–º—è—Ç—å
                user_data['generated_codes'][task['id']] = generated_code
                user_data['html_contents'][task['id']] = html_content
                user_data['current_task'] = task
                user_data['state'] = 'code_generated'
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π HTML —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                with tempfile.NamedTemporaryFile(mode='w', suffix='.html', delete=False, encoding='utf-8') as f:
                    f.write(html_content)
                    temp_file_path = f.name
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                try:
                    await context.bot.delete_message(chat_id=user_id, message_id=message.message_id)
                    user_data['previous_messages'].remove(message.message_id)
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                with open(temp_file_path, 'rb') as f:
                    doc_message = await context.bot.send_document(
                        chat_id=user_id,
                        document=InputFile(f, filename=f"task_{task['id']}_code.html"),
                        caption=f"‚úÖ –ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è: {task['summary']}"
                    )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏
                user_data['task_documents'][task['id']] = doc_message.message_id
                user_data['previous_messages'].append(doc_message.message_id)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                await self.update_main_keyboard(context, user_id, task)
                
                logger.info(f"–ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ {task['id']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                await context.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=message.message_id,
                    text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏."
                )
                
        except Exception as e:
            logger.error(f"Error generating code: {e}")
            await context.bot.edit_message_text(
                chat_id=user_id,
                message_id=message.message_id,
                text=f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {str(e)}"
            )
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if 'temp_file_path' in locals() and os.path.exists(temp_file_path):
                os.remove(temp_file_path)
    
    async def switch_to_task(self, update: Update, context: ContextTypes.DEFAULT_TYPE, task: Dict):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É —Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–∞–π–ª–∞"""
        user_id = update.callback_query.from_user.id if update.callback_query else update.effective_user.id
        user_data = self.get_user_data(user_id)
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await self.cleanup_previous_messages(context, user_id, keep_keyboard=True)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        self.log_activity(user_id, "switch_task", task['id'], task.get('description', ''))
        
        if task['id'] not in user_data['generated_codes']:
            await self.send_temporary_message(
                context, user_id,
                "‚ùå –ö–æ–¥ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –µ—â–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
            )
            return
        
        user_data['current_task'] = task
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π HTML –∫–æ–Ω—Ç–µ–Ω—Ç
        html_content = user_data['html_contents'][task['id']]
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π HTML —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        with tempfile.NamedTemporaryFile(mode='w', suffix='.html', delete=False, encoding='utf-8') as f:
            f.write(html_content)
            temp_file_path = f.name
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ
            with open(temp_file_path, 'rb') as f:
                doc_message = await context.bot.send_document(
                    chat_id=user_id,
                    document=InputFile(f, filename=f"task_{task['id']}_code.html"),
                    caption=f"üìÇ –ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: {task['summary']}"
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏
            user_data['task_documents'][task['id']] = doc_message.message_id
            user_data['previous_messages'].append(doc_message.message_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            await self.update_main_keyboard(context, user_id, task)
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ –∑–∞–¥–∞—á—É {task['id']}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
            await self.send_temporary_message(
                context, user_id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"
            )
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_file_path):
                os.remove(temp_file_path)

def run_bot(token: str):
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    bot = TelegramBot(token)
    print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.application.run_polling()

if __name__ == "__main__":
    # –î–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ telegram_bot.py   
    from dotenv import load_dotenv
    load_dotenv()
        
    BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not BOT_TOKEN:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å TELEGRAM_BOT_TOKEN=your_token")
        exit(1)
    
    run_bot(BOT_TOKEN)
