import streamlit as st
import os
import json
from datetime import datetime
import base64

def show_gallery():
    st.title("üé® –ì–∞–ª–µ—Ä–µ—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
    
    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    projects = scan_projects()
    
    if not projects:
        st.info("üé≠ –ü–æ–∫–∞ –Ω–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π!")
        return
    
    # –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫
    col1, col2 = st.columns([3, 1])
    with col1:
        search_term = st.text_input("üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...")
    with col2:
        project_type = st.selectbox("–¢–∏–ø", ["–í—Å–µ", "–ò–≥—Ä—ã", "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", "–ê–Ω–∏–º–∞—Ü–∏–∏", "–î—Ä—É–≥–æ–µ"])
    
    # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã
    filtered_projects = filter_projects(projects, search_term, project_type)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    st.write(f"**üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤:** {len(filtered_projects)} –∏–∑ {len(projects)}")
    
    # –°–µ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    cols = st.columns(3)
    for idx, project in enumerate(filtered_projects):
        with cols[idx % 3]:
            display_project_card(project, idx)

def scan_projects():
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    projects = []
    base_dir = "generated_codes"
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º Streamlit –ø—Ä–æ–µ–∫—Ç—ã
    streamlit_dir = os.path.join(base_dir, "streamlit", "sessions")
    if os.path.exists(streamlit_dir):
        for session_dir in os.listdir(streamlit_dir):
            session_path = os.path.join(streamlit_dir, session_dir, "codes")
            if os.path.exists(session_path):
                projects.extend(scan_session_projects(session_path, "streamlit"))
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º Telegram –ø—Ä–æ–µ–∫—Ç—ã
    telegram_dir = os.path.join(base_dir, "users")
    if os.path.exists(telegram_dir):
        for user_dir in os.listdir(telegram_dir):
            user_path = os.path.join(telegram_dir, user_dir, "codes")
            if os.path.exists(user_path):
                projects.extend(scan_session_projects(user_path, "telegram"))
    
    return sorted(projects, key=lambda x: x.get('timestamp', ''), reverse=True)

def scan_session_projects(session_path, platform):
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã –≤ —Å–µ—Å—Å–∏–∏"""
    projects = []
    for file in os.listdir(session_path):
        if file.endswith('.json'):
            metadata_path = os.path.join(session_path, file)
            try:
                with open(metadata_path, 'r', encoding='utf-8') as f:
                    metadata = json.load(f)
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π HTML —Ñ–∞–π–ª
                html_file = metadata.get('html_file')
                if html_file and os.path.exists(os.path.join(session_path, html_file)):
                    projects.append({
                        'metadata': metadata,
                        'html_path': os.path.join(session_path, html_file),
                        'platform': platform,
                        'timestamp': metadata.get('generated_at', ''),
                        'type': categorize_project(metadata.get('task_description', '')),
                        'task_id': metadata.get('task_id', '')  # –î–æ–±–∞–≤–ª—è–µ–º task_id
                    })
            except Exception as e:
                print(f"Error reading {metadata_path}: {e}")
    
    return projects

def categorize_project(description):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é"""
    desc_lower = description.lower()
    if any(word in desc_lower for word in ['–∏–≥—Ä', 'game', '—É–±–µ–≥–∏', '–ø–æ–π–º–∞–π']):
        return "–ò–≥—Ä—ã"
    elif any(word in desc_lower for word in ['–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ', 'portfolio', '—Ä–µ–∑—é–º–µ', '–≤–∏–∑–∏—Ç–∫']):
        return "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ"
    elif any(word in desc_lower for word in ['–∞–Ω–∏–º–∞—Ü', 'animation', '–¥–≤–∏–∂', 'moving']):
        return "–ê–Ω–∏–º–∞—Ü–∏–∏"
    else:
        return "–î—Ä—É–≥–æ–µ"

def filter_projects(projects, search_term, project_type):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É –∏ —Ç–∏–ø—É"""
    filtered = projects
    
    if search_term:
        search_term = search_term.lower()
        filtered = [p for p in filtered if search_term in p['metadata'].get('task_description', '').lower()]
    
    if project_type != "–í—Å–µ":
        filtered = [p for p in filtered if p['type'] == project_type]
    
    return filtered

def display_project_card(project, index):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ–µ–∫—Ç–∞"""
    metadata = project['metadata']
    
    with st.container():
        st.markdown(f"### {metadata.get('task_summary', '–ü—Ä–æ–µ–∫—Ç')}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
        st.caption(f"üïê {format_timestamp(metadata.get('generated_at'))}")
        st.caption(f"üì± {project['platform']} ‚Ä¢ {project['type']}")
        
        # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏)
        with st.expander("üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", expanded=False):
            try:
                with open(project['html_path'], 'r', encoding='utf-8') as f:
                    html_content = f.read()
                st.components.v1.html(html_content, height=300, scrolling=True)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üìÇ –û—Ç–∫—Ä—ã—Ç—å", key=f"open_{index}", use_container_width=True):
                display_project_detail(project)
        with col2:
            with open(project['html_path'], 'r', encoding='utf-8') as f:
                html_content = f.read()
            st.download_button(
                "üíæ –°–∫–∞—á–∞—Ç—å",
                html_content,
                file_name=f"{metadata.get('task_id', 'project')}.html",
                mime="text/html",
                key=f"download_{index}",
                use_container_width=True
            )

def display_project_detail(project):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ"""
    st.session_state.current_project = project

def format_timestamp(timestamp):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É"""
    try:
        dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
        return dt.strftime("%d.%m.%Y %H:%M")
    except:
        return timestamp