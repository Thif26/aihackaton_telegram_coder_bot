import streamlit as st
import pandas as pd
import tempfile
import os
import json
import csv
from datetime import datetime
from typing import Dict
from utils.excel_parser import ExcelParser
from utils.ai_client import AIClient
from utils.code_renderer import CodeRenderer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
st.set_page_config(
    page_title="AI Code Generator",
    page_icon="üöÄ",
    layout="centered",
    initial_sidebar_state="collapsed",
    menu_items=None
)

# –°–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã Streamlit
hide_streamlit_style = """
<style>
#MainMenu {visibility: hidden;}
footer {visibility: hidden;}
header {visibility: hidden;}
div[data-testid="stSidebarUserContent"] {
    padding: 1rem;
}
.css-1d391kg {padding: 1rem;}
</style>
"""
st.markdown(hide_streamlit_style, unsafe_allow_html=True)

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
def setup_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    base_save_dir = "generated_codes"
    streamlit_dir = os.path.join(base_save_dir, "streamlit")
    logs_dir = os.path.join(streamlit_dir, "logs")
    sessions_dir = os.path.join(streamlit_dir, "sessions")
    users_dir = os.path.join(streamlit_dir, "users")
    
    os.makedirs(streamlit_dir, exist_ok=True)
    os.makedirs(logs_dir, exist_ok=True)
    os.makedirs(sessions_dir, exist_ok=True)
    os.makedirs(users_dir, exist_ok=True)
    
    return streamlit_dir, logs_dir, sessions_dir, users_dir

STREAMLIT_DIR, LOGS_DIR, SESSIONS_DIR, USERS_DIR = setup_directories()

def get_user_id():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if 'user_id' not in st.session_state:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ cookies –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö fingerprint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ ID
            user_agent = st.query_params.get("user_agent", "unknown")
            # –°–æ–∑–¥–∞–µ–º —Ö—ç—à –Ω–∞ –æ—Å–Ω–æ–≤–µ user agent –∏ –≤—Ä–µ–º–µ–Ω–∏ (–∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–±)
            import hashlib
            user_hash = hashlib.md5(f"{user_agent}_{datetime.now().strftime('%Y%m')}".encode()).hexdigest()[:8]
            st.session_state.user_id = f"user_{user_hash}"
        except:
            st.session_state.user_id = f"user_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    return st.session_state.user_id

def get_session_id():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–µ—Å—Å–∏–∏"""
    if 'session_id' not in st.session_state:
        st.session_state.session_id = f"session_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{os.urandom(4).hex()}"
    return st.session_state.session_id

def save_user_state():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = get_user_id()
    user_state_file = os.path.join(USERS_DIR, f"{user_id}_state.json")
    
    state_to_save = {
        'user_id': user_id,
        'excel_tasks': st.session_state.get('excel_tasks', []),
        'text_tasks': st.session_state.get('text_tasks', []),
        'generated_codes': st.session_state.get('generated_codes', {}),
        'html_contents': st.session_state.get('html_contents', {}),
        'saved_files': st.session_state.get('saved_files', {}),
        'last_saved': datetime.now().isoformat()
    }
    
    try:
        with open(user_state_file, 'w', encoding='utf-8') as f:
            json.dump(state_to_save, f, ensure_ascii=False, indent=2)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

def load_user_state():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = get_user_id()
    user_state_file = os.path.join(USERS_DIR, f"{user_id}_state.json")
    
    if os.path.exists(user_state_file):
        try:
            with open(user_state_file, 'r', encoding='utf-8') as f:
                saved_state = json.load(f)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            st.session_state.excel_tasks = saved_state.get('excel_tasks', [])
            st.session_state.text_tasks = saved_state.get('text_tasks', [])
            st.session_state.generated_codes = saved_state.get('generated_codes', {})
            st.session_state.html_contents = saved_state.get('html_contents', {})
            st.session_state.saved_files = saved_state.get('saved_files', {})
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
            st.session_state.last_state_load = saved_state.get('last_saved', 'unknown')
            
            return True
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            return False
    return False

def load_tasks_from_files():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –Ω–∏—Ö"""
    user_id = get_user_id()
    user_codes_dir = os.path.join(USERS_DIR, user_id, "codes")
    
    if not os.path.exists(user_codes_dir):
        return
    
    loaded_tasks = []
    
    # –ò—â–µ–º –≤—Å–µ JSON —Ñ–∞–π–ª—ã —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    for filename in os.listdir(user_codes_dir):
        if filename.endswith('.json'):
            try:
                with open(os.path.join(user_codes_dir, filename), 'r', encoding='utf-8') as f:
                    metadata = json.load(f)
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                task = {
                    'id': metadata.get('task_id', filename),
                    'description': metadata.get('task_description', ''),
                    'summary': metadata.get('task_summary', ''),
                    'type': metadata.get('task_type', 'file'),
                    'generated_at': metadata.get('generated_at', ''),
                    'html_file': metadata.get('html_file', ''),
                    'metadata_file': filename
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                loaded_tasks.append(task)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                html_file_path = os.path.join(user_codes_dir, task['html_file'])
                if os.path.exists(html_file_path) and task['id'] not in st.session_state.html_contents:
                    with open(html_file_path, 'r', encoding='utf-8') as f:
                        html_content = f.read()
                    st.session_state.html_contents[task['id']] = html_content
                
                # –ü–†–û–í–ï–†–Ø–ï–ú, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–¥ –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
                # –ó–∞–≥—Ä—É–∂–∞–µ–º HTML —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∫–∞–∫ –∫–æ–¥ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                if os.path.exists(html_file_path) and task['id'] not in st.session_state.generated_codes:
                    with open(html_file_path, 'r', encoding='utf-8') as f:
                        html_content = f.read()
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π HTML –∫–∞–∫ –∫–æ–¥
                    st.session_state.generated_codes[task['id']] = html_content
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
    
    return loaded_tasks

def save_generated_code(session_id: str, task: Dict, html_content: str, generated_code: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –≤ —Ñ–∞–π–ª"""
    user_id = get_user_id()
    user_codes_dir = os.path.join(USERS_DIR, user_id, "codes")
    os.makedirs(user_codes_dir, exist_ok=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Ñ–∞–π–ª
    html_filename = f"task_{task['id']}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
    html_filepath = os.path.join(user_codes_dir, html_filename)
    
    with open(html_filepath, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    metadata = {
        'task_id': task['id'],
        'task_description': task.get('description', ''),
        'task_summary': task.get('summary', ''),
        'task_type': task.get('type', 'unknown'),
        'generated_at': datetime.now().isoformat(),
        'html_file': html_filename,
        'user_id': user_id,
        'session_id': session_id,
        'platform': 'streamlit'
    }
    
    metadata_filename = f"task_{task['id']}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    metadata_filepath = os.path.join(user_codes_dir, metadata_filename)
    
    with open(metadata_filepath, 'w', encoding='utf-8') as f:
        json.dump(metadata, f, ensure_ascii=False, indent=2)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    save_user_state()
    
    return html_filepath, metadata_filepath

def log_activity(session_id: str, action: str, task_id: str = "", task_description: str = ""):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ Streamlit"""
    user_id = get_user_id()
    log_file = os.path.join(LOGS_DIR, f"streamlit_activity_{datetime.now().strftime('%Y-%m-%d')}.csv")
    file_exists = os.path.isfile(log_file)
    
    with open(log_file, 'a', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        if not file_exists:
            writer.writerow(['timestamp', 'user_id', 'session_id', 'action', 'task_id', 'task_description', 'platform'])
        
        writer.writerow([
            datetime.now().isoformat(),
            user_id,
            session_id,
            action,
            task_id,
            task_description[:100],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
            'streamlit'
        ])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Ç–∏–ª–∏—Ç
@st.cache_resource
def load_ai_client():
    return AIClient()

@st.cache_resource
def load_code_renderer():
    return CodeRenderer()

def main():
    # URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å GitHub
    header_image_path = "https://raw.githubusercontent.com/Thif26/aihackaton_telegram_coder_bot/main/images/Header.png"
    logo_image_path = "https://raw.githubusercontent.com/Thif26/aihackaton_telegram_coder_bot/main/images/logo.jpg"
    
    # –í–µ—Ä—Ö–Ω—è—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É —ç–∫—Ä–∞–Ω–∞
    st.markdown(
        f"""
        <div style="width: 100%; margin: 0 auto; text-align: center;">
            <img src="{header_image_path}" 
                 style="width: 100%; max-width: 100%; height: auto; border-radius: 10px; margin-bottom: 1rem;">
        </div>
        """, 
        unsafe_allow_html=True
    )
    
    st.title("üöÄ AI Code Generator")
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–µ—Å—Å–∏–∏
    user_id = get_user_id()
    session_id = get_session_id()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    log_activity(session_id, "start_app")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if 'excel_tasks' not in st.session_state:
        st.session_state.excel_tasks = []
    if 'text_tasks' not in st.session_state:
        st.session_state.text_tasks = []
    if 'file_tasks' not in st.session_state:
        st.session_state.file_tasks = []
    if 'current_task' not in st.session_state:
        st.session_state.current_task = None
    if 'generated_codes' not in st.session_state:
        st.session_state.generated_codes = {}
    if 'html_contents' not in st.session_state:
        st.session_state.html_contents = {}
    if 'saved_files' not in st.session_state:
        st.session_state.saved_files = {}
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
#    if 'state_loaded' not in st.session_state:
#        if load_user_state():
#            st.success("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–µ—Å—Å–∏–π!")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
#        file_tasks = load_tasks_from_files()
#        if file_tasks:
#            st.session_state.file_tasks = file_tasks
#            st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(file_tasks)} –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è!")
#        
#        st.session_state.state_loaded = True
    
    # –ú–æ–±–∏–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    if st.session_state.current_task and st.session_state.current_task['id'] in st.session_state.generated_codes:
        display_results(session_id, user_id)
    else:
        show_input_section(session_id, user_id)
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —É–≥–ª—É
    with st.container():
        col1, col2, col3 = st.columns([1, 1, 510])
        with col3:
            if st.button("**‚¨á‚¨á‚¨á –ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚¨á‚¨á‚¨á**", use_container_width=True):
                st.session_state.show_settings = not st.session_state.get('show_settings', False)
        
        if st.session_state.get('show_settings', False):
            show_settings(session_id, user_id)
    
# –ù–∏–∂–Ω—è—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    st.markdown(
        f"""
        <div style="width: 100%; margin: 2rem auto; text-align: center;">
            <img src="{logo_image_path}" 
                 style="width: 100%; max-width: 300px; height: auto; border-radius: 10px;">
        </div>
        """, 
        unsafe_allow_html=True
    )

#def display_task_history(session_id):
#    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
#    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
#    if st.session_state.file_tasks:
#        st.markdown("---")
#        st.markdown("### üìö –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á")
#        display_task_tiles(st.session_state.file_tasks, session_id, "file")


def show_input_section(session_id, user_id):
    st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ .xlsx —Ñ–∞–π–ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
    
    # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –≤–≤–æ–¥–∞
    input_method = st.radio(
        "–°–ø–æ—Å–æ–± –≤–≤–æ–¥–∞:",
        ["–§–∞–π–ª Excel", "–¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"],
        horizontal=True,
        label_visibility="collapsed",
        index=1
    )
    
    if input_method == "–§–∞–π–ª Excel":
        handle_file_upload_mobile(session_id)
    else:
        handle_text_input_mobile(session_id)

def handle_file_upload_mobile(session_id):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö"""
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ .xlsx —Ñ–∞–π–ª",
        type=['xlsx'],
        help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏'",
        key="excel_uploader"
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞
    if uploaded_file:
        log_activity(session_id, "upload_excel", task_description=uploaded_file.name)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–¥–∞—á –≤ –≤–∏–¥–µ –ø–ª–∏—Ç–æ–∫
    if st.session_state.excel_tasks:
        st.markdown("---")
        st.markdown("**üìö –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ Excel:**")
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∏—Ç–∫–∏ –¥–ª—è –∑–∞–¥–∞—á –∏–∑ Excel
        display_task_tiles(st.session_state.excel_tasks, session_id, "excel")
    
    if uploaded_file:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª
            file_hash = hash(uploaded_file.getvalue())
            if 'last_file_hash' not in st.session_state or st.session_state.last_file_hash != file_hash:
                excel_parser = ExcelParser()
                tasks = excel_parser.extract_tasks_from_xlsx(uploaded_file)
                
                if tasks:
                    st.session_state.excel_tasks = tasks
                    st.session_state.last_file_hash = file_hash
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
                    save_user_state()
                    
                    st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
                    log_activity(session_id, "excel_processed", task_description=f"Found {len(tasks)} tasks")
                else:
                    st.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª–µ")
                    log_activity(session_id, "excel_empty")
                    
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            log_activity(session_id, "excel_error", task_description=str(e))

def handle_text_input_mobile(session_id):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö"""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    if st.session_state.file_tasks:
        st.markdown("---")
        st.markdown("**üìö –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á:**")
        display_task_tiles(st.session_state.file_tasks, session_id, "file")
    
    # –ö–Ω–æ–ø–∫–∏ —Å –≥–æ—Ç–æ–≤—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏
    st.markdown("**üéØ –ì–æ—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã:**")

    # –°–æ–∑–¥–∞–µ–º –ø–ª–∏—Ç–∫–∏ –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    example_cols = st.columns(2)
    
    with example_cols[0]:
        if st.button("üê± –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è –∫–æ—Ç–∞\n–≤ IT", 
                    use_container_width=True, 
                    key="cat_portfolio_unique",
                    help="–°–æ–∑–¥–∞–π –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ —Å–∞–π—Ç-–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è –∫–æ—Ç–∞"):
            example_description = "–°–æ–∑–¥–∞–π –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ —Å–∞–π—Ç-–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è –∫–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç —Ä–∞–±–æ—Ç—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –≤ –Ø–Ω–¥–µ–∫—Å–µ. –í–∫–ª—é—á–∏ –∞–Ω–∏–º–∞—Ü–∏–∏, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ —á—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞."
            create_task_from_example(session_id, example_description, "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è –∫–æ—Ç–∞ –≤ IT")
        
        if st.button("üó∫Ô∏è –ö–∞—Ä—Ç–∞ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ä–∞—Å–ø–∏—Å–∞–Ω–æ –≥–¥–µ –∫—É—Ä—å–µ—Ä—ã –ø—Ä—è—á—É—Ç –≤–∫—É—Å–Ω—ã–µ –æ—Ç–º–µ–Ω—ë–Ω–∫–∏", 
                    use_container_width=True, 
                    key="treasure_map_unique",
                    help="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"):
            example_description = "–°–æ–∑–¥–∞–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É —Å–æ–∫—Ä–æ–≤–∏—â —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∫–ª–∞–¥–∞, –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–º–ø–∞—Å–æ–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–∞."
            create_task_from_example(session_id, example_description, "–ö–∞—Ä—Ç–∞ —Å–æ–∫—Ä–æ–≤–∏—â –∫—É—Ä—å–µ—Ä–æ–≤")
        
        if st.button("üéÆ –ò–≥—Ä–∞: –£–±–µ–≥–∏ –æ—Ç —Ç–∏–º–ª–∏–¥–∞", 
                    use_container_width=True, 
                    key="dinosaur_game_unique",
                    help="–ü—Ä–æ—Å—Ç–∞—è –∏–≥—Ä–∞ —Å –ø—Ä—ã–∂–∫–∞–º–∏ –∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è–º–∏"):
            example_description = "–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç—É—é –∏–≥—Ä—É '–£–±–µ–≥–∏ –æ—Ç —Ç–∏–º–ª–∏–¥–∞' —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º, –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è–º–∏ –∏ —Å—á–µ—Ç—á–∏–∫–æ–º –æ—á–∫–æ–≤. –í –∫–æ—Ç–æ—Ä–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂ –¥–æ–ª–∂–µ–Ω –ø—Ä—ã–≥–∞—Ç—å –ø–æ –Ω–∞–∂–∞—Ç–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —É–∫–ª–æ–Ω—è—Ç—å—Å—è –æ—Ç –ø—Ä–µ–ø—è–¥—Å—Ç–≤–∏–π"
            create_task_from_example(session_id, example_description, "–£–±–µ–≥–∏ –æ—Ç —Ç–∏–º–ª–∏–¥–∞")
    
    with example_cols[1]:
        if st.button("üòÇ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–µ–º–æ–≤\n–Ω–∞ –¥–µ–π–ª–∏–∫", 
                    use_container_width=True, 
                    key="meme_generator_unique",
                    help="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–µ–º–æ–≤ —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"):
            example_description = "–°–æ–∑–¥–∞–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–µ–º–æ–≤ —Å –¥–≤–∏–∂—É—â–∏–º–∏—Å—è —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏, —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."
            create_task_from_example(session_id, example_description, "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–µ–º–æ–≤")
        
        if st.button("ü™¨ –¢–∞–π–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –¥—Ä–µ–≤–Ω–∏—Ö —è–Ω–¥–µ–∫—Å–æ–∏–¥–æ–≤ **–£–ó–ù–ê–¢–¨ –ë–û–õ–¨–®–ï**", 
                    use_container_width=True, 
                    key="qwfqfqw_unique",
                    help="–®—É—Ç–ª–∏–≤—ã–π —Å–∞–π—Ç –æ –¥—Ä–µ–≤–Ω–∏—Ö –Ø–Ω–¥–µ–∫—Å–æ–∏–¥–∞—Ö"):
            example_description = "–°–æ–∑–¥–∞–π —Å–∞–π—Ç –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞ —à—É—Ç–ª–∏–≤—ã–π –º–∞–Ω–µ—Ä —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏—Å—Ç–æ—Ä–∏—è –æ —Ç–æ–º, –∫–∞–∫ –¥—Ä–µ–≤–Ω–∏–µ –Ø–Ω–¥–µ–∫—Å–æ–∏–¥—ã –ø—Ä–∏–ª–µ—Ç–µ–ª–∏ –Ω–∞ –ø–ª–∞–Ω–µ—Ç—É –ó–µ–º–ª—è —á—Ç–æ–±—ã –ø–æ–¥–∞—Ä–∏—Ç—å –ª—é–¥—è–º —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã –∏ –ª—É—á—à—É—é –ø–æ–∏—Å–∫–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É."
            create_task_from_example(session_id, example_description, "–¢–∞–π–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –¥—Ä–µ–≤–Ω–∏—Ö —è–Ω–¥–µ–∫—Å–æ–∏–¥–æ–≤")
        
        if st.button("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞\n–¥–æ—Å—Ç–∞–≤–∫–∏", 
                    use_container_width=True, 
                    key="analytics_dashboard_unique",
                    help="–î–∞—à–±–æ—Ä–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"):
            example_description = "–°–æ–∑–¥–∞–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏, —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏."
            create_task_from_example(session_id, example_description, "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏")
    
    st.markdown("---")
    st.markdown("**üí° –ò–ª–∏ –ø—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:**")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º session_state –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    if 'text_input' not in st.session_state:
        st.session_state.text_input = ""
    
    task_description = st.text_area(
        "–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É:",
        value=st.session_state.text_input,
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°–æ–∑–¥–∞–π —Å–∞–π—Ç-–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è –∫–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç —Ä–∞–±–æ—Ç—É –≤ IT...",
        height=100,
        key="text_input_area"
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º session_state –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞
    st.session_state.text_input = task_description
    
    if st.button("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", type="primary", use_container_width=True, key="generate_from_text"):
        if task_description.strip():
            create_task_from_text(session_id, task_description)
        else:
            st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")

def create_task_from_example(session_id, description, summary):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    existing_task = next((t for t in st.session_state.text_tasks if t['description'] == description), None)
    
    if existing_task:
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–µ–µ
        st.session_state.current_task = existing_task
        st.success(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É: {summary}")
        st.rerun()
        return
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    task_id = f"text_{len(st.session_state.text_tasks) + 1}"
    task = {
        'id': task_id,
        'description': description,
        'summary': summary,
        'type': 'text'
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á
    st.session_state.text_tasks.append(task)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞
    log_activity(session_id, "use_example", task_id, summary)
    
    generate_code(session_id, task)

def create_task_from_text(session_id, task_description):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    existing_task = next((t for t in st.session_state.text_tasks if t['description'] == task_description), None)
    
    if existing_task:
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–µ–µ
        st.session_state.current_task = existing_task
        st.success(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É: {existing_task['summary']}")
        st.rerun()
        return
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    task_id = f"text_{len(st.session_state.text_tasks) + 1}"
    task = {
        'id': task_id,
        'description': task_description,
        'summary': task_description[:50] + "..." if len(task_description) > 50 else task_description,
        'type': 'text'
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á
    st.session_state.text_tasks.append(task)
    
    generate_code(session_id, task)

def display_task_tiles(tasks, session_id, task_type):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –≤–∏–¥–µ –ø–ª–∏—Ç–æ–∫ —Å –ø—Ä–µ–≤—å—é"""
    if not tasks:
        return
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ —Ä—è–¥—ã –ø–æ 2 –ø–ª–∏—Ç–∫–∏ –≤ –∫–∞–∂–¥–æ–º
    for i in range(0, len(tasks), 2):
        cols = st.columns(2)
        
        for j in range(2):
            if i + j < len(tasks):
                task = tasks[i + j]
                with cols[j]:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ –∏–Ω–¥–µ–∫—Å—É –¥–ª—è –±–æ–ª—å—à–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                    context_index = f"{task_type}_{i + j}"
                    render_task_tile(task, session_id, task_type, context_index)

def render_task_tile(task, session_id, task_type, index):
    """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ–¥–Ω–æ–π –ø–ª–∏—Ç–∫–∏ –∑–∞–¥–∞—á–∏ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å—é"""
    # –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    has_generated_code = task['id'] in st.session_state.generated_codes
    status = "‚úÖ" if has_generated_code else "‚è≥"
    
    # –ü–æ–ª—É—á–∞–µ–º HTML –ø—Ä–µ–≤—å—é –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
    preview_html = ""
    if has_generated_code:
        preview_html = st.session_state.html_contents.get(task['id'], "")

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–ª–∏—Ç–∫–∏
    with st.container():
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º columns –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        col1, col2 = st.columns([4, 1])
        
        with col1:
            # –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
            # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏, ID –∏ –∏–Ω–¥–µ–∫—Å–∞
            unique_key = f"main_tile_{task_type}_{task['id']}_{index}_{hash(task['summary'])}"
            if st.button(
                f"**{task['summary']}**\n\n"
                f"{status} {task['id']} ‚Ä¢ {task_type}",
                key=unique_key,
                use_container_width=True,
                help="–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É"
            ):
                switch_to_task(session_id, task)
        
        with col2:
            # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º
            regen_key = f"regenerate_{task_type}_{task['id']}_{index}_{hash(task['summary'])}"
            if st.button(
                "üîÑ",
                key=regen_key,
                use_container_width=True,
                help="–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥" if task_type != 'file' else "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ñ–∞–π–ª–æ–≤"
            ):
                if task_type != 'file':
                    generate_code(session_id, task)
                else:
                    st.warning("–î–ª—è –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –ø–ª–∏—Ç–∫–∞–º–∏
        st.markdown("---")
        
def generate_code(session_id, task):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è –∑–∞–¥–∞—á–∏"""
    ai_client = load_ai_client()
    code_renderer = load_code_renderer()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    log_activity(session_id, "generate_code_start", task['id'], task.get('description', ''))
    
    with st.spinner("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é AI..."):
        try:
            generated_code = ai_client.generate_code(task['description'])
            
            if generated_code:
                html_content = code_renderer.prepare_html(generated_code)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ —Ñ–∞–π–ª—ã
                html_filepath, metadata_filepath = save_generated_code(
                    session_id, task, html_content, generated_code
                )
                
                # –ü–†–ê–í–ò–õ–¨–ù–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –≤ —Å–ª–æ–≤–∞—Ä—å - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º –∫–æ–¥, –∞ –Ω–µ True
                st.session_state.generated_codes[task['id']] = generated_code
                st.session_state.html_contents[task['id']] = html_content
                st.session_state.current_task = task
                st.session_state.show_settings = False
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
                st.session_state.saved_files[task['id']] = {
                    'html_file': html_filepath,
                    'metadata_file': metadata_filepath
                }
                
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
                log_activity(session_id, "generate_code_success", task['id'], task.get('description', ''))
                
                st.success("‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                st.rerun()
            else:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥")
                log_activity(session_id, "generate_code_failed", task['id'], task.get('description', ''))
                
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
            log_activity(session_id, "generate_code_error", task['id'], str(e))

def switch_to_task(session_id, task):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    st.session_state.current_task = task
    st.session_state.show_settings = False
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
    log_activity(session_id, "switch_task", task['id'], task.get('description', ''))
    
    st.success(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –∑–∞–¥–∞—á—É: {task['summary']}")
    st.rerun()

def display_results(session_id, user_id):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö"""
    task = st.session_state.current_task
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
    generated_code = st.session_state.generated_codes.get(task['id'])
    html_content = st.session_state.html_contents.get(task['id'])
    
    if not generated_code or not html_content:
        st.error("‚ùå –ö–æ–¥ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        clear_session()
        return
    
    st.subheader(f"–ó–∞–¥–∞—á–∞: {task['summary']}")
    
    st.markdown("---")
    
    # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    col1, col2, col3, col4 = st.columns([2, 2, 2, 1])
    with col1:
        if st.button("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", use_container_width=True):
            generate_code(session_id, task)
    with col2:
        st.download_button(
            label="üíæ –°–∫–∞—á–∞—Ç—å HTML",
            data=html_content,
            file_name=f"task_{task['id']}_code.html",
            mime="text/html",
            use_container_width=True
        )
    with col3:
        if st.button("üìù –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", use_container_width=True):
            clear_session()
            st.rerun()
    with col4:
        if st.button("üìä", use_container_width=True, help="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"):
            st.session_state.show_stats = not st.session_state.get('show_stats', False)
    
    # –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if st.session_state.get('show_stats', False):
        show_statistics(session_id, user_id)
    
    # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –∫–æ–ª–æ–Ω–æ–∫
    st.markdown("### üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
    st.components.v1.html(html_content, height=1000, scrolling=True)
    
    st.markdown("### üìù –ö–æ–¥")
    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥"):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–π –∫–æ–¥–∞, –∞ –Ω–µ True
        if isinstance(generated_code, str):
            st.code(generated_code, language='html')
        else:
            st.error("–ö–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")


def show_statistics(session_id, user_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–µ—Å—Å–∏–∏"""
    st.markdown("---")
    st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏")
    
    total_tasks = len(st.session_state.excel_tasks) + len(st.session_state.text_tasks) + len(st.session_state.file_tasks)
    generated_tasks = len(st.session_state.generated_codes)
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–í—Å–µ–≥–æ –∑–∞–¥–∞—á", total_tasks)
    with col2:
        st.metric("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ", generated_tasks)
    with col3:
        st.metric("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", user_id[:8] + "...")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
    if st.session_state.saved_files:
        st.markdown("**üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:**")
        for task_id, files in st.session_state.saved_files.items():
            st.write(f"- –ó–∞–¥–∞—á–∞ {task_id}: {os.path.basename(files['html_file'])}")

def show_settings(session_id, user_id):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ"""
    st.markdown("---")
    st.markdown("### üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_tasks = len(st.session_state.excel_tasks) + len(st.session_state.text_tasks) + len(st.session_state.file_tasks)
    generated_tasks = len(st.session_state.generated_codes)
    st.write(f"**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}, –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {generated_tasks}")
    
    if st.button("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API", use_container_width=True):
        test_api_connection(session_id)
    
    # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–¥–∞—á", use_container_width=True):
        clear_history(session_id)
    
    # –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
    with st.expander("üìã –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"):
        st.markdown("""
        1. **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ –≤—ã–≥—Ä—É–∑–∫—É Excel –∏–ª–∏ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é**
        2. **–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É** `–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥`
                    
        **üí° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
        - –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
        - –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        - –î–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É üîÑ
        - –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        - –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
        - –ó–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        """)

def test_api_connection(session_id):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    ai_client = load_ai_client()
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    log_activity(session_id, "test_api_connection")
    
    with st.spinner("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ..."):
        test_result = ai_client.generate_code("–°–æ–∑–¥–∞–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ 'Hello World'")
        
        if test_result:
            st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenRouter API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            log_activity(session_id, "test_api_success")
        else:
            st.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.")
            log_activity(session_id, "test_api_failed")

def clear_session():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ (–Ω–æ –Ω–µ –∏—Å—Ç–æ—Ä–∏–∏)"""
    keys_to_clear = ['current_task', 'show_settings', 'show_stats']
    for key in keys_to_clear:
        if key in st.session_state:
            del st.session_state[key]

def clear_history(session_id):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á –∏ –∫–æ–¥–æ–≤"""
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É
    log_activity(session_id, "clear_history")
    
    st.session_state.excel_tasks = []
    st.session_state.text_tasks = []
    st.session_state.file_tasks = []
    st.session_state.generated_codes = {}
    st.session_state.html_contents = {}
    st.session_state.saved_files = {}
    
    if 'last_file_hash' in st.session_state:
        del st.session_state.last_file_hash
    
    clear_session()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    save_user_state()
    
    st.success("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á –æ—á–∏—â–µ–Ω–∞!")
    st.rerun()

if __name__ == "__main__":
    main()
